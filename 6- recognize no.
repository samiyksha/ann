import numpy as np
from sklearn.neural_network import MLPClassifier

numbers = {
    '0': [1, 1, 1, 
          1, 0, 1, 
          1, 0, 1, 
          1, 0, 1, 
          1, 1, 1], 

    '1': [0, 1, 0, 
          1, 1, 0, 
          0, 1, 0, 
          0, 1, 0, 
          1, 1, 1],

    '2': [1, 1, 1, 
          0, 0, 1, 
          1, 1, 1, 
          1, 0, 0, 
          1, 1, 1],

    '39': [1, 1, 1, 
           0, 0, 1, 
           1, 1, 1, 
           0, 0, 1, 
           1, 1, 1]
}

X = np.array(list(numbers.values())) 
y = np.array(list(numbers.keys()))    

model = MLPClassifier(hidden_layer_sizes=(10,), max_iter=1000, solver='adam', random_state=42)
model.fit(X, y)

def predict_number(input_matrix):
    input_vector = np.array(input_matrix).flatten().reshape(1, -1)  # Flatten and reshape
    prediction = model.predict(input_vector)
    return prediction[0]

test_2 = [1, 1, 1, 
          0, 0, 1, 
          1, 1, 1, 
          1, 0, 0, 
          1, 1, 1]

recognized_number = predict_number(test_2)
print(f"Recognized Number: {recognized_number}")
