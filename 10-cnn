import numpy as np
import tensorflow as tf
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt

# Generate synthetic dataset (100 samples)
def generate_data(num_samples=100):
    X = []
    y_class = []
    y_bbox = []

    for _ in range(num_samples):
        img = np.zeros((64, 64, 1))
        x = np.random.randint(5, 40)
        y = np.random.randint(5, 40)
        w = np.random.randint(10, 20)
        h = np.random.randint(10, 20)
        img[y:y+h, x:x+w, 0] = 255

        label = 1  # only one class
        bbox = [x / 64, y / 64, w / 64, h / 64]  # normalized

        X.append(img)
        y_class.append(label)
        y_bbox.append(bbox)

    return np.array(X)/255.0, np.array(y_class), np.array(y_bbox)

# Create dataset
X, y_class, y_bbox = generate_data(1000)

# Split dataset
X_train, X_test = X[:800], X[800:]
y_class_train, y_class_test = y_class[:800], y_class[800:]
y_bbox_train, y_bbox_test = y_bbox[:800], y_bbox[800:]

# Build CNN model for object detection
input_layer = layers.Input(shape=(64, 64, 1))

x = layers.Conv2D(32, (3,3), activation='relu')(input_layer)
x = layers.MaxPooling2D((2,2))(x)
x = layers.Conv2D(64, (3,3), activation='relu')(x)
x = layers.MaxPooling2D((2,2))(x)
x = layers.Flatten()(x)
x = layers.Dense(128, activation='relu')(x)

# Two outputs
class_output = layers.Dense(1, activation='sigmoid', name='class_output')(x)
bbox_output = layers.Dense(4, activation='sigmoid', name='bbox_output')(x)

# Create model
model = models.Model(inputs=input_layer, outputs=[class_output, bbox_output])

# Compile model
model.compile(
    optimizer='adam',
    loss={'class_output': 'binary_crossentropy', 'bbox_output': 'mse'},
    metrics={'class_output': 'accuracy'}
)

# Train the model
model.fit(
    X_train, {'class_output': y_class_train, 'bbox_output': y_bbox_train},
    epochs=20,
    validation_split=0.1
)

# Evaluate
results = model.evaluate(X_test, {'class_output': y_class_test, 'bbox_output': y_bbox_test})
print("\nEvaluation Results:", results)

# Visualize prediction
def visualize_prediction(idx):
    img = X_test[idx]
    true_box = y_bbox_test[idx]
    pred_class, pred_box = model.predict(img[np.newaxis, ...])
    pred_box = pred_box[0]

    plt.imshow(img.squeeze(), cmap='gray')
    ax = plt.gca()

    # Draw true box
    tx, ty, tw, th = true_box
    tx, ty, tw, th = tx*64, ty*64, tw*64, th*64
    rect = plt.Rectangle((tx, ty), tw, th, edgecolor='g', facecolor='none', label='True')
    ax.add_patch(rect)

    # Draw predicted box
    px, py, pw, ph = pred_box
    px, py, pw, ph = px*64, py*64, pw*64, ph*64
    rect = plt.Rectangle((px, py), pw, ph, edgecolor='r', facecolor='none', label='Pred')
    ax.add_patch(rect)

    plt.legend()
    plt.title(f"Pred Class: {int(pred_class[0][0] > 0.5)}")
    plt.show()

# Try visualizing a few predictions
visualize_prediction(0)
