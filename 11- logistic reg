import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.datasets import mnist
import matplotlib.pyplot as plt

# Load MNIST dataset (handwritten digits 0-9)
(X_train, y_train), (X_test, y_test) = mnist.load_data()

# Normalize pixel values (0 to 1)
X_train = X_train / 255.0
X_test = X_test / 255.0

# Flatten input images
X_train = X_train.reshape(-1, 28*28)
X_test = X_test.reshape(-1, 28*28)

# Build neural network
model = models.Sequential([
    layers.Dense(128, activation='relu', input_shape=(784,)),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')  # 10 classes (0 to 9)
])

# Compile model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
history = model.fit(X_train, y_train, epochs=5, validation_split=0.1)

# Evaluate
test_loss, test_acc = model.evaluate(X_test, y_test)
print("\nTest Accuracy:", test_acc)

import tensorflow as tf
from tensorflow.keras import layers, models
from sklearn.metrics import confusion_matrix, classification_report
import numpy as np

# Reuse MNIST dataset, but convert to binary (0 or 1)
(X_train, y_train), (X_test, y_test) = tf.keras.datasets.mnist.load_data()

# Convert to binary classification: is digit "5" or not
y_train_binary = np.where(y_train == 5, 1, 0)
y_test_binary = np.where(y_test == 5, 1, 0)

# Normalize & flatten
X_train = X_train.reshape(-1, 28*28) / 255.0
X_test = X_test.reshape(-1, 28*28) / 255.0

# Logistic regression model (single neuron)
model = models.Sequential([
    layers.Dense(1, activation='sigmoid', input_shape=(784,))
])

# Compile
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Train
model.fit(X_train, y_train_binary, epochs=5, batch_size=32)

# Predict
y_pred_probs = model.predict(X_test)
y_pred = (y_pred_probs > 0.5).astype("int")

# Evaluate
accuracy = np.mean(y_pred.flatten() == y_test_binary)
print("Test Accuracy:", accuracy)

# Confusion Matrix
print("\nConfusion Matrix:")
print(confusion_matrix(y_test_binary, y_pred))

# Detailed Report
print("\nClassification Report:")
print(classification_report(y_test_binary, y_pred, target_names=["Not 5", "Is 5"]))
