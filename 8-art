import numpy as np

class ARTNetwork:
    def __init__(self, input_size, rho, alpha):
        self.input_size = input_size
        self.rho = rho
        self.alpha = alpha
        self.W = np.zeros(input_size)  # Initialize weights to zero
        self.V = np.ones(input_size)  # Initialize V to one
    
    def train(self, X):
        for x in X:
            y = x / (self.rho + np.linalg.norm(self.W))  # Normalize input
            j = np.argmax(y)  # Find the index of the max value
            if y[j] >= self.alpha * np.sum(y) and self.V[j] > 0:  # Resonance check
                self.W += self.V[j] * x  # Update weights
                self.V[j] *= 0.5  # Reduce V[j]
            else:
                self.V[j] += 0.5  # Increase V[j]
    
    def classify(self, X):
        classes = []
        for x in X:
            y = x / (self.rho + np.linalg.norm(self.W))  # Normalize input
            j = np.argmax(y)  # Find the index of the max value
            classes.append(j)  # Append predicted class
        return classes

# Example training data
X_train = np.array([[0, 1, 1, 0],
                    [1, 0, 0, 1],
                    [1, 0, 0, 0]])

# Example test data
X_test = np.array([[0, 1, 0, 0],
                   [1, 1, 1, 0]])

input_size = X_train.shape[1]  # Number of features
rho = 0.5  # Constant for normalization
alpha = 0.9  # Threshold for resonance

# Create and train ART network
art_network = ARTNetwork(input_size, rho, alpha)
art_network.train(X_train)

# Classify test data
classes = art_network.classify(X_test)

# Print predicted classes for test data
for i, data in enumerate(X_test):
    print(f"Test Data {i+1}: Predicted Class: {classes[i]}")
